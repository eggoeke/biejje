function plotFT(y,g,iy,tau,fflag,nyqflag,powflag,perflag)% The inputs are:%   y = the original data train (required)%   g = the FT (just put 0 if you don't want this plotted)%   iy = the inverse FT (just put 0 if you don't want this plotted)%   tau = the spacing of the data train (required)%   fflag = 0 if you want angular freq; 1 if you want regular freq%   nyqflag = 0 if you want to plot ALL data; 1 if you want to ignore aliases%   powflag = 0 if you want to plot real/imag parts of g; 1 to plot power%   perflag = 0 to plot vs. frequency; 1 to plot vs. periodclf;% Define important variablesN = length(y);x = (0:N-1)*tau;alph = 2*pi/N/tau*(0:N-1);pow = sqrt(conj(g).*g);% Determine whether we will be using frequency or angular freq.f = alph;period = 2*pi./f;xname = 'Angular Frequency';if fflag  f = alph/2/pi;  xname = 'Regular Frequency';endif perflag  xname = 'Period';end  % Plot the original function, and (if present) the inverse transformif length(g)==N  subplot(2,1,1)endplot(x,y,'bo')hold onif length(iy)==N   plot(x,iy,'r+')   title('Function and Inverse Transform')else   title('Original Data Train')endxlabel('x')ylabel('y')hold off% Plot the transform, if desiredif length(g)==N  subplot(2,1,2)  nmax = N;  if nyqflag     nmax = round(N/2);     if perflag       xname = strcat(xname,' (Min Nyquist)');     else       xname = strcat(xname,' (Max Nyquist)');     end  end  if powflag    if perflag      plot(period(1:nmax),pow(1:nmax),'g*-')    else      plot(f(1:nmax),pow(1:nmax),'g*-')    end    ylabel('Power')  else    if perflag      plot(period(1:nmax),real(g(1:nmax)),'r*',period(1:nmax),imag(g(1:nmax)),'g*')    else      plot(f(1:nmax),real(g(1:nmax)),'r*',f(1:nmax),imag(g(1:nmax)),'g*')    end    ylabel('Real and Imaginary Coefficients')  end  title('The Fourier Transform')  xlabel(xname)endend